// /*
//  * MedCare API
//  *
//  * MedCare system API
//  *
//  * API version: 1.0.0
//  * Contact: <your_email>
//  * Generated by: OpenAPI Generator (https://openapi-generator.tech)
//  */

// package medcare

// import (
// 	"net/http"

// 	"github.com/gin-gonic/gin"
// )

// type VaccinationRecordsAPI interface {

// 	// internal registration of api routes
// 	addRoutes(routerGroup *gin.RouterGroup)

// 	// CreateVaccinationRecord - Create a new vaccination record
// 	CreateVaccinationRecord(ctx *gin.Context)

// 	// GetAllVaccinationRecords - Get all vaccination records
// 	GetAllVaccinationRecords(ctx *gin.Context)
// }

// // partial implementation of VaccinationRecordsAPI - all functions must be implemented in add on files
// type implVaccinationRecordsAPI struct {
// }

// func newVaccinationRecordsAPI() VaccinationRecordsAPI {
// 	return &implVaccinationRecordsAPI{}
// }

// func (this *implVaccinationRecordsAPI) addRoutes(routerGroup *gin.RouterGroup) {
// 	routerGroup.Handle(http.MethodPost, "/vaccination-records", this.CreateVaccinationRecord)
// 	routerGroup.Handle(http.MethodGet, "/vaccination-records", this.GetAllVaccinationRecords)
// }

// // CreateVaccinationRecord - Create a new vaccination record
// func (this *implVaccinationRecordsAPI) CreateVaccinationRecord(ctx *gin.Context) {
// 	ctx.AbortWithStatus(http.StatusNotImplemented)
// }

// // GetAllVaccinationRecords - Get all vaccination records
// func (this *implVaccinationRecordsAPI) GetAllVaccinationRecords(ctx *gin.Context) {
// 	ctx.AbortWithStatus(http.StatusNotImplemented)
// }

package medcare

import (
	"net/http"

	"github.com/DanielCok17/medcare-webapi/internal/db_service"
	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
)

type implVaccinationRecordsAPI struct{}

// CreateVaccinationRecord - Saves new vaccination record
func (this *implVaccinationRecordsAPI) CreateVaccinationRecord(ctx *gin.Context) {
	value, exists := ctx.Get("vaccination_record_db_service")
	if !exists {
		ctx.JSON(http.StatusInternalServerError, gin.H{
			"status":  "Internal Server Error",
			"message": "db not found",
			"error":   "db not found",
		})
		return
	}

	db, ok := value.(db_service.DbService[VaccinationRecord])
	if !ok {
		ctx.JSON(http.StatusInternalServerError, gin.H{
			"status":  "Internal Server Error",
			"message": "db context is not of required type",
			"error":   "cannot cast db context to db_service.DbService",
		})
		return
	}

	vaccinationRecord := VaccinationRecord{}
	err := ctx.BindJSON(&vaccinationRecord)
	if err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{
			"status":  "Bad Request",
			"message": "Invalid request body",
			"error":   err.Error(),
		})
		return
	}

	if vaccinationRecord.Id == "" {
		vaccinationRecord.Id = uuid.New().String()
	}

	err = db.CreateDocument(ctx, vaccinationRecord.Id, &vaccinationRecord)
	if err != nil {
		switch err {
		case db_service.ErrConflict:
			ctx.JSON(http.StatusConflict, gin.H{
				"status":  "Conflict",
				"message": "Vaccination record already exists",
				"error":   err.Error(),
			})
		default:
			ctx.JSON(http.StatusBadGateway, gin.H{
				"status":  "Bad Gateway",
				"message": "Failed to create vaccination record in database",
				"error":   err.Error(),
			})
		}
		return
	}

	ctx.JSON(http.StatusCreated, vaccinationRecord)
}

// GetAllVaccinationRecords - Get all vaccination records
func (this *implVaccinationRecordsAPI) GetAllVaccinationRecords(ctx *gin.Context) {
	value, exists := ctx.Get("vaccination_record_db_service")
	if !exists {
		ctx.JSON(http.StatusInternalServerError, gin.H{
			"status":  "Internal Server Error",
			"message": "db not found",
			"error":   "db not found",
		})
		return
	}

	db, ok := value.(db_service.DbService[VaccinationRecord])
	if !ok {
		ctx.JSON(http.StatusInternalServerError, gin.H{
			"status":  "Internal Server Error",
			"message": "db context is not of required type",
			"error":   "cannot cast db context to db_service.DbService",
		})
		return
	}

	records, err := db.FindAllDocuments(ctx)
	if err != nil {
		ctx.JSON(http.StatusBadGateway, gin.H{
			"status":  "Bad Gateway",
			"message": "Failed to fetch vaccination records from database",
			"error":   err.Error(),
		})
		return
	}

	ctx.JSON(http.StatusOK, records)
}

// GetVaccinationRecordById - Get vaccination record by ID
func (this *implVaccinationRecordsAPI) GetVaccinationRecordById(ctx *gin.Context) {
	value, exists := ctx.Get("vaccination_record_db_service")
	if !exists {
		ctx.JSON(http.StatusInternalServerError, gin.H{
			"status":  "Internal Server Error",
			"message": "db not found",
			"error":   "db not found",
		})
		return
	}

	db, ok := value.(db_service.DbService[VaccinationRecord])
	if !ok {
		ctx.JSON(http.StatusInternalServerError, gin.H{
			"status":  "Internal Server Error",
			"message": "db context is not of required type",
			"error":   "cannot cast db context to db_service.DbService",
		})
		return
	}

	recordId := ctx.Param("recordId")
	record, err := db.FindDocument(ctx, recordId)
	if err != nil {
		ctx.JSON(http.StatusNotFound, gin.H{
			"status":  "Not Found",
			"message": "Vaccination record not found",
			"error":   err.Error(),
		})
		return
	}

	ctx.JSON(http.StatusOK, record)
}

// DeleteVaccinationRecord - Delete a vaccination record
func (this *implVaccinationRecordsAPI) DeleteVaccinationRecord(ctx *gin.Context) {
	value, exists := ctx.Get("vaccination_record_db_service")
	if !exists {
		ctx.JSON(http.StatusInternalServerError, gin.H{
			"status":  "Internal Server Error",
			"message": "db not found",
			"error":   "db not found",
		})
		return
	}

	db, ok := value.(db_service.DbService[VaccinationRecord])
	if !ok {
		ctx.JSON(http.StatusInternalServerError, gin.H{
			"status":  "Internal Server Error",
			"message": "db context is not of required type",
			"error":   "cannot cast db context to db_service.DbService",
		})
		return
	}

	recordId := ctx.Param("recordId")
	err := db.DeleteDocument(ctx, recordId)
	if err != nil {
		ctx.JSON(http.StatusNotFound, gin.H{
			"status":  "Not Found",
			"message": "Vaccination record not found",
			"error":   err.Error(),
		})
		return
	}

	ctx.Status(http.StatusNoContent)
}

// addRoutes - Adds routes for vaccination records API
func (api *implVaccinationRecordsAPI) addRoutes(group *gin.RouterGroup) {
	group.POST("/vaccination_records", api.CreateVaccinationRecord)
	group.GET("/vaccination_records", api.GetAllVaccinationRecords)
	group.GET("/vaccination_records/:recordId", api.GetVaccinationRecordById)
	group.DELETE("/vaccination_records/:recordId", api.DeleteVaccinationRecord)
}
